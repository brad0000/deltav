{"version":3,"sources":["Asteroid.ts"],"names":[],"mappings":"AAAA,IAAU,MAAM,CAkCf;AAlCD,WAAU,MAAM,EAAC,CAAC;IACd,uBAA8B,WAAI;QAE9B,YAAY,MAAc,EAAE,CAAS,EAAE,CAAS,EAAU,MAAc;YACpE,MAAM,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YADkC,WAAM,GAAN,MAAM,CAAQ;YAGpE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;YAGpB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;YAC9E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,GAAG,MAAM,CAAC;YAEpD,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;YACxD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjC,CAAC,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,UAAU,CAAC;gBAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAEV,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAC1B,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3D,CAAC;QACL,CAAC;QAEM,MAAM,CAAC,IAAY,EAAE,KAAY,EAAE,KAAY;YAClD,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACjC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC9C,CAAC;QAEM,MAAM,CAAC,GAA6B;YACvC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACtB,CAAC;IAEL,CAAC;IAhCY,eAAQ,WAgCpB,CAAA;AACL,CAAC,EAlCS,MAAM,KAAN,MAAM,QAkCf","file":"Asteroid.js","sourcesContent":["namespace deltav {\r\n    export class Asteroid extends Body {\r\n\r\n        constructor(logger: Logger, x: number, y: number, private radius: number) {\r\n            super(logger, x, y);\r\n\r\n            this.brush = \"gray\";\r\n\r\n            // radom velocities\r\n            this.velocity.setElements([Math.random() * 7 - 3.5, Math.random() * 7 - 3.5]);\r\n            this.rotationSpeed = Math.random() * 0.001 - 0.0005;\r\n\r\n            let v = Vector.create([1, 0]);\r\n            let r = 0;\r\n            let iterations = Math.round(4 + Math.random() * radius);\r\n            for (let i = 0; i < iterations; i++) {\r\n                 r += Math.PI * 2 / iterations;\r\n                 this.geometry.push(\r\n                     // this.position.add(\r\n                         v.rotate(r, Vector.Zero(2))\r\n                         .multiply(this.radius * (1 + Math.random())));\r\n            }\r\n        }\r\n\r\n        public update(time: number, world: World, input: Input) {\r\n            super.update(time, world, input);\r\n            this.heading += this.rotationSpeed / time;\r\n        }\r\n\r\n        public render(ctx: CanvasRenderingContext2D) {\r\n            super.render(ctx);\r\n        }\r\n\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}