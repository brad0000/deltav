{"version":3,"sources":["Body.ts"],"names":[],"mappings":"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","file":"Body.js","sourcesContent":["namespace deltav {\r\n    export class Body {\r\n        public logger: Logger;\r\n\r\n        public isDead = false;\r\n        public tag: number;\r\n        \r\n        protected health = 1;\r\n\r\n        protected mass = 5;\r\n        protected position = Vector.Zero(2);\r\n        protected velocity = Vector.Zero(2);\r\n        protected acceleration = Vector.Zero(2);\r\n        protected rotationSpeed: number;\r\n        protected heading = 0;\r\n        protected brush: string;\r\n        protected radius: number;\r\n        protected collisionRadius: number;\r\n\r\n        private geometry = Array<Vector>();\r\n        private boundingBox: Box = null;\r\n\r\n        constructor(logger: Logger, position: Vector) {\r\n            this.position = position;\r\n            this.brush = \"black\";\r\n            this.rotationSpeed = 0;\r\n        }\r\n\r\n        public getX() { return this.position.e(1); }\r\n        public getY() { return this.position.e(2); }\r\n\r\n        public getP() { return this.position; }\r\n        public getV() { return this.velocity; }\r\n\r\n        public getH() { return this.heading; }\r\n        public getR() { return this.radius; }\r\n\r\n        public getCollisionBox(): Box {\r\n            let p = this.position.elements;\r\n            return new Box(\r\n                p[1] - this.collisionRadius,\r\n                p[1] + this.collisionRadius,\r\n                p[0] + this.collisionRadius,\r\n                p[0] - this.collisionRadius);\r\n        }\r\n\r\n        public getBoundingBox(): Box {\r\n            if (this.boundingBox == null) {\r\n                let p = this.position.elements;\r\n                this.boundingBox = new Box(\r\n                    p[1] - this.radius,\r\n                    p[1] + this.radius,\r\n                    p[0] + this.radius,\r\n                    p[0] - this.radius);\r\n            }\r\n            return this.boundingBox;\r\n        }\r\n\r\n        /*\r\n         * Update the body, and return whether or not the body moved. \r\n         */\r\n        public update(time: number, world: World, input: IInput): boolean {\r\n            this.position = this.position.add(this.velocity.multiply(time));\r\n            this.velocity = this.velocity.add(this.acceleration.multiply(time));\r\n            this.boundingBox = null;\r\n            \r\n            return !this.velocity.eql([0, 0]);\r\n        }\r\n\r\n        public render(ctx: CanvasRenderingContext2D) {\r\n            ctx.fillStyle = this.brush;\r\n            ctx.strokeStyle = this.brush;\r\n\r\n            ctx.beginPath();\r\n\r\n            let v = this.position.add(this.geometry[0]).rotate(this.heading, this.position);\r\n            ctx.moveTo(v.e(1), v.e(2));\r\n\r\n            for (let i = 1; i < this.geometry.length; i++) {\r\n                v = this.position.add(this.geometry[i]).rotate(this.heading, this.position);\r\n                ctx.lineTo(v.e(1), v.e(2));\r\n            }\r\n\r\n            ctx.closePath();\r\n            ctx.fill();\r\n\r\n            // // bounding box\r\n            // let b = this.getBox();\r\n            // ctx.beginPath();\r\n            // ctx.strokeRect(b.west, b.north, b.width, b.height);\r\n            // ctx.strokeStyle = \"yellow\";\r\n            // ctx.stroke();\r\n        }\r\n\r\n        public collide(body: Body): boolean {\r\n            this.health -= body.mass / 100;\r\n            this.isDead = this.health <= 0;\r\n            return this.isDead;\r\n        }\r\n\r\n        protected setGeometry(geometry: Array<Vector>) {\r\n            this.geometry = geometry;\r\n            let lengths = this.geometry.map((v, i, e) => { return v.modulus(); });\r\n            this.radius = Math.max(...lengths);\r\n            this.collisionRadius = this.radius * 0.7;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}