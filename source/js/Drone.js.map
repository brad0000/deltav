{"version":3,"sources":["Drone.ts"],"names":[],"mappings":"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","file":"Drone.js","sourcesContent":["namespace deltav {\r\n    export class Drone extends Ship {\r\n        private pilot: AiPilot;\r\n\r\n        constructor(logger: Logger, x: number, y: number) {\r\n            super(logger, x, y);\r\n            this.pilot = new AiPilot(logger, this);\r\n            this.brush = \"blue\";\r\n        }\r\n\r\n        public update(time: number, world: World, input: IInput) {\r\n            let aiInput = this.pilot.update(time, world);\r\n            super.update(time, world, aiInput);\r\n        }\r\n\r\n        public render(ctx: CanvasRenderingContext2D) {\r\n            super.render(ctx);\r\n        }\r\n    }\r\n\r\n    export class AiPilot {\r\n        private input = new AiInput();\r\n        private tactic: AiTactic;\r\n\r\n        constructor(private logger: Logger, private drone: Drone) {\r\n            this.tactic = new HuntTactic(this.logger, this.drone);\r\n        }\r\n\r\n        public update(time: number, world: World): IInput {\r\n            this.tactic = this.tactic.update(time, world, this.input);\r\n            return this.input;\r\n        }\r\n    }\r\n\r\n    export class AiTactic {\r\n        constructor(protected logger: Logger) {\r\n            // nothing\r\n        }\r\n        public update(time: number, world: World, input: AiInput): AiTactic {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    export class WaitTactic extends AiTactic {\r\n        private isStopped = false;\r\n\r\n        constructor(logger: Logger, private ship: Ship, private countdown: number) {\r\n            super(logger);\r\n        }\r\n        public update(time: number, world: World, input: AiInput): AiTactic {\r\n            super.update(time, world, input);\r\n\r\n            this.countdown -= time;\r\n\r\n            if (this.countdown < 0) {\r\n                return new HuntTactic(this.logger, this.ship);\r\n            } else {\r\n                if (this.isStopped) {\r\n                    // nothing\r\n                    input.reset();\r\n                } else {\r\n                    let speed = this.ship.getV().modulus();\r\n                    if (speed = 0) {\r\n                        this.isStopped = true;\r\n                        input.set(CtlKey.Brake, false);\r\n                    } else {\r\n                        input.set(CtlKey.Brake, true);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        }\r\n    }\r\n\r\n    export class HuntTactic extends AiTactic {\r\n        public targetPosition: Vector = null;\r\n        public interceptVector: Vector;\r\n\r\n        private hasDeltaVSolution = false;\r\n        private initialDistanceToTarget: number;\r\n        private lastDistanceToTarget: number;\r\n\r\n        constructor(logger: Logger, private ship: Ship) {\r\n            super(logger);\r\n        }\r\n        public update(time: number, world: World, input: AiInput): AiTactic {\r\n            super.update(time, world, input);\r\n\r\n            let shipPosition = this.ship.getP();\r\n\r\n            if (this.targetPosition == null) {\r\n                this.targetPosition = Vector.create([\r\n                    world.width * 0.1 + Math.random() * world.width * 0.8,\r\n                    world.height * 0.1 + Math.random() * world.height * 0.8,\r\n                ]);\r\n                this.interceptVector = this.targetPosition.subtract(shipPosition);\r\n                this.initialDistanceToTarget = this.interceptVector.modulus();\r\n            } else {\r\n                this.interceptVector = this.targetPosition.subtract(shipPosition);\r\n            }\r\n\r\n            let distanceToTarget = this.interceptVector.modulus();\r\n\r\n            if (distanceToTarget < 20) {\r\n                // We're there, end of tactic.\r\n                input.reset();\r\n                return new WaitTactic(this.logger, this.ship, 5);\r\n            } else {\r\n\r\n                let shipVelocity = this.ship.getV();\r\n                let speed = shipVelocity.modulus();\r\n\r\n                let onTarget = Math.abs(this.interceptVector.toAngle() - shipVelocity.toAngle())\r\n                    < (Math.PI / 8);\r\n\r\n                if (this.hasDeltaVSolution) {\r\n                    // we have an acceleration solution, check to see if we're still on target\r\n                    if (onTarget) {\r\n                        // we're still on target, continue\r\n                    } else {\r\n                        // we have a lock, but we're off that target, reset lock.\r\n                        this.hasDeltaVSolution = false;\r\n                    }\r\n                } else {\r\n                    // we don't have an acceleration solution, if we're on target then make one\r\n                    if (onTarget) {\r\n                        this.interceptVector = this.targetPosition.subtract(shipPosition);\r\n                        this.initialDistanceToTarget = this.interceptVector.modulus();\r\n                        this.hasDeltaVSolution = true;\r\n                    } else {\r\n                        // we don't have an acceleration solution and we're off target.\r\n                    }\r\n                }\r\n\r\n                if (this.hasDeltaVSolution) {\r\n                    // move using the acceleration solution\r\n\r\n                    // accelerate towards the target then brake as we approach\r\n                    if (distanceToTarget < this.initialDistanceToTarget / 2) {\r\n                        input.set(CtlKey.Accelerate, false);\r\n                        input.set(CtlKey.Brake, true);\r\n                    } else {\r\n                        input.set(CtlKey.Accelerate, true);\r\n                        input.set(CtlKey.Brake, false);\r\n                    }\r\n\r\n                    // only start turning once we're moving\r\n                    if (speed > 10) {\r\n                        if (this.interceptVector.toAngle() < shipVelocity.toAngle()) {\r\n                            input.set(CtlKey.AntiClockwise, true);\r\n                            input.set(CtlKey.Clockwise, false);\r\n                        } else {\r\n                            input.set(CtlKey.AntiClockwise, false);\r\n                            input.set(CtlKey.Clockwise, true);\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    // rotate slowly to get on-target.\r\n\r\n                    // fixed slow turning speed\r\n                    if (speed < 30) {\r\n                        input.set(CtlKey.Accelerate, true);\r\n                        input.set(CtlKey.Brake, false);\r\n                    } else {\r\n                        input.set(CtlKey.Accelerate, false);\r\n                        input.set(CtlKey.Brake, true);\r\n                    }\r\n\r\n                    // only start turning once we're moving\r\n                    if (speed > 10) {\r\n                        if (this.interceptVector.toAngle() < shipVelocity.toAngle()) {\r\n                            input.set(CtlKey.AntiClockwise, true);\r\n                            input.set(CtlKey.Clockwise, false);\r\n                        } else {\r\n                            input.set(CtlKey.AntiClockwise, false);\r\n                            input.set(CtlKey.Clockwise, true);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.lastDistanceToTarget = distanceToTarget;\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n\r\n    export class AiInput implements IInput {\r\n        public lastClick: MouseEvent = null;\r\n        private pressed = new Array<boolean>();\r\n\r\n        public isDown(key: CtlKey): boolean {\r\n            return this.pressed[key];\r\n        }\r\n\r\n        public set(key: CtlKey, value: boolean) {\r\n            this.pressed[key] = value;\r\n        }\r\n\r\n        public reset() {\r\n            for (let i = 0; i < this.pressed.length; i++) {\r\n                this.pressed[i] = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}