{"version":3,"sources":["World.ts"],"names":[],"mappings":"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","file":"World.js","sourcesContent":["namespace deltav {\r\n\r\n    export class World extends Box {\r\n        public drag = -0.9;\r\n        private player: Ship;\r\n        private gcCountdown = 10;\r\n\r\n        private loader: WorldLoader;\r\n        \r\n        private staticBodyTree: RTree;\r\n        private staticBodyList = new Array<Body>();\r\n        \r\n        private dynamicBodyTree: RTree;\r\n        private dynamicBodyList = new Array<Body>();\r\n\r\n        constructor(private logger: Logger, public width: number, public height: number) {\r\n            super(0, height, width, 0);\r\n\r\n            this.staticBodyTree = new RTree(this);\r\n            this.dynamicBodyTree = new RTree(this);\r\n\r\n            this.player = new Ship(this.logger, Vector.create([this.width / 2, this.height / 2]));\r\n            this.addDynamicBody(this.player);\r\n\r\n            this.loader = new WorldLoader(logger, this);\r\n        }\r\n\r\n        public addStaticBody(body: Body) {\r\n            body.tag = this.staticBodyList.length; \r\n            this.staticBodyList[body.tag] = body;\r\n\r\n            this.staticBodyTree.add(body);\r\n        }\r\n\r\n        public addDynamicBody(body: Body) {\r\n            body.tag = this.dynamicBodyList.length; \r\n            this.dynamicBodyList[body.tag] = body;\r\n            \r\n            this.dynamicBodyTree.add(body);\r\n        }\r\n\r\n        public update(time: number, input: IInput) {\r\n            this.gcCountdown -= time;\r\n\r\n            this.loader.update(time);\r\n\r\n            // collision detection\r\n            let skipHashset: { [id: string]: boolean; } = {};\r\n            let a, b: Body;\r\n            let nearbyBodies: Array<Body>;\r\n            for (let i = 0; i < this.dynamicBodyList.length; i++) {\r\n                a = this.dynamicBodyList[i];\r\n                \r\n                // Find all dynamicBodies in the vicinity, this will include body a.\r\n                nearbyBodies = this.dynamicBodyTree.search(a.getBoundingBox().scale(10, 10));\r\n                \r\n                for (let j = 0; j < nearbyBodies.length; j++) {\r\n                    // get body b\r\n                    b = nearbyBodies[j];\r\n                    \r\n                    // Don't check for collisions between a body and itself, or between a two bodies\r\n                    // that we've already checked. \r\n                    if (a.tag !== b.tag && !skipHashset[a.tag + \",\" + b.tag]) {\r\n                        // flag not to check the inverse\r\n                        skipHashset[b.tag + \",\" + a.tag] = true;\r\n\r\n                        // check for collisions\r\n                        if (this.intersect(a, b)) {\r\n                            this.handleCollision(a, b);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.gcCountdown < 0) {\r\n                this.updateBodiesWithGC(this.dynamicBodyList, this.dynamicBodyTree, time, input);\r\n                this.updateBodiesWithGC(this.staticBodyList, this.staticBodyTree, time, input);\r\n                this.gcCountdown = 10;\r\n            } else {\r\n                this.updateBodies(this.dynamicBodyList, this.dynamicBodyTree, time, input);\r\n                this.updateBodies(this.staticBodyList, this.staticBodyTree, time, input);\r\n            }\r\n        }\r\n\r\n        public render(ctx: CanvasRenderingContext2D, clip: Box) {\r\n            this.renderBodies(this.staticBodyTree.search(clip), ctx, null);\r\n            this.renderBodies(this.dynamicBodyTree.search(clip), ctx, null);\r\n        }\r\n\r\n        public getPlayerPosition() {\r\n            return this.player.getP();\r\n        }\r\n\r\n        public addStar(star: Body) {\r\n            this.staticBodyTree.add(star);\r\n        }\r\n\r\n        private handleCollision(a: Body, b: Body) {\r\n\r\n            let isADead = a.collide(b);\r\n            let isBDead = b.collide(a);\r\n            \r\n            let wreakage: Wreckage;\r\n            \r\n            if (isADead && isBDead) {\r\n                wreakage = new Wreckage(\r\n                    this.logger,\r\n                    a.getP().avg(b.getP()), \r\n                    a.getV().avg(b.getV()),\r\n                    (a.getR() + b.getR()) / 2);\r\n            } else if (isADead) {\r\n                wreakage = new Wreckage(\r\n                    this.logger,\r\n                    a.getP(), \r\n                    a.getV(),\r\n                    a.getR());\r\n            } else if (isBDead) {\r\n                wreakage = new Wreckage(\r\n                    this.logger,\r\n                    b.getP(), \r\n                    b.getV(),\r\n                    b.getR());\r\n            }\r\n            \r\n            if (wreakage != null) {\r\n                this.addStaticBody(wreakage);\r\n            }\r\n        }\r\n        \r\n        private intersect(a: Body, b: Body): boolean {\r\n            if (a.isDead || b.isDead) {\r\n                return false;\r\n            } else {\r\n                if (a.getCollisionBox().intersects(b.getCollisionBox())) {\r\n                    if (!this.isBulletHittingWeapon(a, b)) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        private isBulletHittingWeapon(a: Body, b: Body): boolean {\r\n            // Check for an edge case where a bullet collides with a ship it was just fired from.\r\n            if (a instanceof Ship && b instanceof Bullet) {\r\n                return (<Ship>a).recentlyFired(<Bullet>b);\r\n            } else if (a instanceof Bullet && b instanceof Ship) {\r\n                return (<Ship>b).recentlyFired(<Bullet>a);\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        private updateBodiesWithGC(bodies: Array<Body>, bodyTree: RTree, time: number, input: IInput) {\r\n            let body: Body;\r\n            for (let i = 0; i < bodies.length; i++) {\r\n                body = bodies[i];\r\n                if (body.isDead) {\r\n                    bodies.splice(i, 1);\r\n                    bodyTree.remove(body);\r\n                    i--;\r\n                } else {\r\n                    if (body.update(time, this, input)) {\r\n                        bodyTree.remove(body);\r\n                        bodyTree.add(body);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private updateBodies(bodies: Array<Body>, bodyTree: RTree, time: number, input: IInput) {\r\n            let body: Body;\r\n            for (let i = 0; i < bodies.length; i++) {\r\n                body = bodies[i];\r\n                if (!body.isDead) {\r\n                    if (body.update(time, this, input)) {\r\n                        bodyTree.remove(body);\r\n                        bodyTree.add(body);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private renderBodies(bodies: Array<Body>, ctx: CanvasRenderingContext2D, clip: Box) {\r\n\r\n            if (clip == null) {\r\n                \r\n                for (let i = 0; i < bodies.length; i++) {\r\n                    if (!bodies[i].isDead) {\r\n                        bodies[i].render(ctx);\r\n                    }\r\n                }\r\n                \r\n            } else {\r\n             \r\n                for (let i = 0; i < bodies.length; i++) {\r\n                    if (!bodies[i].isDead && clip.intersects(bodies[i].getBoundingBox())) {\r\n                        bodies[i].render(ctx);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n    \r\n    export class WorldLoader {\r\n        private starsPreload: Array<Body>;\r\n        private starsPreloadIndex: number;\r\n        \r\n        constructor(private logger: Logger, private world: World) {\r\n\r\n            this.starsPreload = new Array<Body>(500000);\r\n            this.starsPreloadIndex = 0;\r\n            \r\n            for (let i = 0; i < this.starsPreload.length; i++) {\r\n                this.starsPreload[i] = \r\n                    new Star(\r\n                        this.logger,\r\n                        Vector.create([\r\n                            Math.random() * this.world.width,\r\n                            Math.random() * this.world.height,\r\n                        ]),\r\n                        Math.random() * 1.5);\r\n            }\r\n\r\n            for (let i = 0; i < 1000; i++) {\r\n                this.world.addStaticBody(\r\n                    new Asteroid(\r\n                        this.logger,\r\n                        Vector.create([\r\n                            Math.random() * this.world.width,\r\n                            Math.random() * this.world.height,\r\n                        ]),\r\n                        Math.random() * 30));\r\n            }\r\n\r\n            // for (let i = 0; i < 10; i++) {\r\n            //     this.world.addDynamicBody(\r\n            //         new Drone(\r\n            //             this.logger,\r\n            //             Vector.create([\r\n            //                 Math.random() * this.world.width,\r\n            //                 Math.random() * this.world.height,\r\n            //             ])));\r\n            // }\r\n            \r\n        }\r\n        \r\n        public update(time: number) {\r\n            if (this.starsPreload != null) {\r\n                for (; this.starsPreloadIndex < this.starsPreload.length; this.starsPreloadIndex++) {\r\n                    this.world.addStar(this.starsPreload[this.starsPreloadIndex]);\r\n                }\r\n                if (this.starsPreloadIndex === this.starsPreload.length - 1) {\r\n                    this.starsPreload = [];\r\n                    this.starsPreload = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n"],"sourceRoot":"/source/"}