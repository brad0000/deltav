{"version":3,"sources":["Client.ts"],"names":[],"mappings":"AACA,IAAU,MAAM,CA0Ff;AA1FD,WAAU,MAAM,EAAC,CAAC;IAEd;QASI,YAAY,MAAyB,EAAE,OAA4B;YAJ3D,UAAK,GAAG,CAAC,CAAC;YAMd,MAAM,CAAC,KAAK,GAAI,MAAM,CAAC,UAAU,CAAC;YAClC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC;YAEnC,IAAI,CAAC,MAAM,GAAG,IAAI,aAAM,CAAC,OAAO,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,GAAG,IAAI,YAAK,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YAClD,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3E,IAAI,CAAC,KAAK,GAAG,IAAI,YAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACzC,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC;QAEO,aAAa;YACjB,WAAW,CAAC;gBACR,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACxB,IAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC,EAAE,EAAE,CAAC,CAAC;QACX,CAAC;QAEO,WAAW,CAAC,IAAY;YAC5B,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;YAEnB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC;QAEO,WAAW;YACf,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;IACL,CAAC;IAxCY,aAAM,SAwClB,CAAA;IAED,mBAA0B,UAAG;QAEzB,YAAoB,MAAc,EAAE,KAAa,EAAE,MAAc,EAAU,KAAY;YACnF,MAAM,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YADX,WAAM,GAAN,MAAM,CAAQ;YAAyC,UAAK,GAAL,KAAK,CAAO;QAEvF,CAAC;QAEM,MAAM,CAAC,IAAY,EAAE,KAAY,EAAE,KAAa;YAEnD,IAAI,cAAc,GAAG,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAE/C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAC9B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QActB,CAAC;QAEM,MAAM,CAAC,GAA6B;YAEvC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC;YACxB,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC5C,GAAG,CAAC,IAAI,EAAE,CAAC;YAOX,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAGvC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAE7B,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC;IACL,CAAC;IA7CY,WAAI,OA6ChB,CAAA;AACL,CAAC,EA1FS,MAAM,KAAN,MAAM,QA0Ff","file":"Client.js","sourcesContent":["\r\nnamespace deltav {\r\n\r\n    export class Client {\r\n\r\n        private ctx: CanvasRenderingContext2D;\r\n        private world: World;\r\n        private view: View;\r\n        private clock = 0;\r\n        private logger: Logger;\r\n        private input: IInput;\r\n\r\n        constructor(canvas: HTMLCanvasElement, logArea: HTMLTextAreaElement) {\r\n\r\n            canvas.width  = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n\r\n            this.logger = new Logger(logArea);\r\n            this.world = new World(this.logger, 20000, 40000);\r\n            this.view = new View(this.logger, canvas.width, canvas.height, this.world);\r\n            this.input = new Input(canvas, document);\r\n            this.ctx = canvas.getContext(\"2d\");\r\n\r\n            this.startGameLoop();\r\n        }\r\n\r\n        private startGameLoop() {\r\n            setInterval(() => {\r\n                this.updateWorld(0.033);\r\n                this.renderWorld();\r\n            }, 30);\r\n        }\r\n\r\n        private updateWorld(time: number) {\r\n            this.clock += time;\r\n            \r\n            this.world.update(time, this.input);\r\n            this.view.update(time, this.world, this.input);\r\n        }\r\n\r\n        private renderWorld() {\r\n            this.view.render(this.ctx);\r\n        }\r\n    }\r\n    \r\n    export class View extends Box {\r\n        \r\n        constructor(private logger: Logger, width: number, height: number, private world: World) {\r\n            super(0, height, width, 0);\r\n        }\r\n\r\n        public update(time: number, world: World, input: IInput) {\r\n            \r\n            let playerPosition = world.getPlayerPosition();\r\n            \r\n            this.centerOn(playerPosition);\r\n            this.clamp(world);\r\n            \r\n            // if (input.isDown(CtlKey.Down)) {\r\n            //     this.translate(0, 10);\r\n            // }\r\n            // if (input.isDown(CtlKey.Up)) {\r\n            //     this.translate(0, -10);\r\n            // }\r\n            // if (input.isDown(CtlKey.Left)) {\r\n            //     this.translate(-10, 0);\r\n            // }\r\n            // if (input.isDown(CtlKey.Right)) {\r\n            //     this.translate(10, 0);\r\n            // }\r\n        }\r\n\r\n        public render(ctx: CanvasRenderingContext2D) {\r\n            \r\n            ctx.fillStyle = \"black\";\r\n            ctx.fillRect(0, 0, this.width, this.height);\r\n            ctx.fill();\r\n            \r\n            // HEADS UP\r\n            // ctx.strokeStyle = \"white\";\r\n            // ctx.strokeText(this.west + \",\" + this.north, 20, 20);\r\n            // ctx.stroke();\r\n            \r\n            ctx.translate(-this.west, -this.north);\r\n            \r\n            // Tell the world to render itself, but to clip to the view's bounds.\r\n            this.world.render(ctx, this);\r\n            \r\n            ctx.translate(this.west, this.north);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}