{"version":3,"sources":["RTree.ts"],"names":[],"mappings":"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","file":"RTree.js","sourcesContent":["namespace deltav {\r\n\r\n    export class RTree {\r\n\r\n        private root: RTreeNode;\r\n\r\n        constructor(world: World) {\r\n            \r\n            let iBoxes: Box[], jBoxes: Box[], kBoxes: Box[], lBoxes: Box[], mBoxes: Box[];\r\n            let iNode: RTreeNode, jNode: RTreeNode, kNode: RTreeNode, lNode: RTreeNode, mNode: RTreeNode;\r\n            \r\n            this.root = new RTreeNode(world, false, false);\r\n\r\n            iBoxes = world.divide();\r\n            for (let i = 0; i < iBoxes.length; i++) {\r\n                iNode = new RTreeNode(iBoxes[i], false, false);\r\n                \r\n                jBoxes = iBoxes[i].divide();\r\n                for (let j = 0; j < 4; j++) {\r\n                    jNode = new RTreeNode(jBoxes[j], false, false);\r\n\r\n                    kBoxes = jBoxes[j].divide();\r\n                    for (let k = 0; k < 4; k++) {\r\n                        kNode = new RTreeNode(kBoxes[k], false, false);\r\n                        \r\n                        lBoxes = kBoxes[k].divide();\r\n                        for (let l = 0; l < 4; l++) {\r\n                            lNode = new RTreeNode(lBoxes[l], false, false);\r\n\r\n                            mBoxes = lBoxes[l].divide();\r\n                            for (let m = 0; m < 4; m++) {\r\n                                mNode = new RTreeNode(mBoxes[m], true, false);\r\n                                lNode.children.push(mNode);\r\n                            }                        \r\n                            \r\n                            kNode.children.push(lNode);\r\n                        }\r\n                        \r\n                        jNode.children.push(kNode);    \r\n                    }                \r\n                    \r\n                    iNode.children.push(jNode);\r\n                }\r\n                \r\n                this.root.children.push(iNode);        \r\n            }\r\n        }\r\n\r\n        public add(body: Body): RTreeNode {\r\n            return this.root.add(body);\r\n        }\r\n        \r\n        public search(box: Box): Body[] {\r\n            let hits = new Array<Body>();\r\n            \r\n            this.root.search(box, hits);\r\n            \r\n            return hits;\r\n        }\r\n    }\r\n\r\n    export class RTreeNode {\r\n        public children = new Array<RTreeNode>();\r\n        public body: Body;\r\n        \r\n        constructor(public box: Box, public isLastBranch, public isLeaf: boolean) {\r\n            // nothing\r\n        }\r\n        \r\n        public search(searchArea: Box, hits: Array<Body>) {\r\n            if (this.isLeaf) {\r\n                if (searchArea.intersects(this.body.getBoundingBox())) {\r\n                    hits.push(this.body);\r\n                }\r\n            } else {\r\n                // Searching a branch            \r\n                if (this.box.intersects(searchArea)) {\r\n                    for (let i = 0; i < this.children.length; i++) {\r\n                        this.children[i].search(searchArea, hits);\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n            }   \r\n        }\r\n        \r\n        public add(body: Body) {\r\n            if (this.isLeaf) {\r\n                // this node IS a star, don't add stars to stars.\r\n                return null;\r\n            } else if (this.isLastBranch) {\r\n                // this is the ONLY level that we add stars.\r\n                if (this.box.intersects(body.getBoundingBox())) {\r\n                    let result = new RTreeNode(body.getBoundingBox(), false, true);\r\n                    result.body = body;\r\n                    this.children.push(result);\r\n                }\r\n            } else {\r\n                // this is an internal branch, just check to see if it's worth notifying children.\r\n                if (this.box.intersects(body.getBoundingBox())) {\r\n                    for (let i = 0; i < this.children.length; i++) {\r\n                        this.children[i].add(body);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}